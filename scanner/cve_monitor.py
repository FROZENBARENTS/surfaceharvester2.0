#!/usr/bin/env python3
"""
Event-driven –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ CVE –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç vulnx –æ–±—Ä–∞–±–æ—Ç–∫—É
"""

import asyncio
import logging
import sqlite3
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List
import threading
import signal
import sys

from vulnx_processor import VulnXProcessor

logger = logging.getLogger(__name__)

class CVEMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö CVE –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ vulnx"""
    
    def __init__(self, db_path: str = "scan_results.db", check_interval: int = 60):
        self.db_path = db_path
        self.check_interval = check_interval  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        self.processor = VulnXProcessor(db_path)
        self.running = False
        self.worker_thread = None
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        self.last_check = datetime.now() - timedelta(hours=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
        self.stop()
        sys.exit(0)
    
    def get_new_vulnerabilities(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ò—â–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            cursor.execute("""
                SELECT v.id, v.description, v.vulnerability_type, v.resource, v.created_at
                FROM vulnerability v
                LEFT JOIN cve_processing cp ON v.id = cp.vulnerability_id
                WHERE v.created_at > ?
                AND (v.description LIKE '%CVE-%' OR v.description LIKE '%cve-%')
                AND (cp.vulnerability_id IS NULL OR cp.status IN ('failed', 'pending'))
                ORDER BY v.created_at DESC
            """, (self.last_check.isoformat(),))
            
            vulnerabilities = []
            for row in cursor.fetchall():
                vuln_id, description, vuln_type, resource, created_at = row
                vulnerabilities.append({
                    'id': vuln_id,
                    'description': description,
                    'type': vuln_type,
                    'resource': resource,
                    'created_at': created_at
                })
            
            conn.close()
            return vulnerabilities
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {e}")
            return []
    
    def process_new_vulnerabilities(self, vulnerabilities: List[Dict]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        if not vulnerabilities:
            return
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(vulnerabilities)} –Ω–æ–≤—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
        
        for vuln in vulnerabilities:
            try:
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —É—è–∑–≤–∏–º–æ—Å—Ç—å {vuln['id']} ({vuln['type']})")
                
                result = self.processor.process_vulnerability(
                    vuln['id'], 
                    vuln['description']
                )
                
                if result['total_exploits'] > 0:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {result['total_exploits']} —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –¥–ª—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏ {vuln['id']}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–∞—Ö
                    self._notify_exploits_found(vuln, result)
                else:
                    logger.info(f"‚ÑπÔ∏è  –≠–∫—Å–ø–ª–æ–π—Ç—ã –¥–ª—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏ {vuln['id']} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ {vuln['id']}: {e}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            time.sleep(2)
    
    def _notify_exploits_found(self, vulnerability: Dict, result: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–∞—Ö"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
        # - Slack/Discord webhook
        # - Telegram bot
        # - Email
        # - SIEM —Å–∏—Å—Ç–µ–º—ã
        
        logger.warning(f"üö® –ù–ê–ô–î–ï–ù–´ –≠–ö–°–ü–õ–û–ô–¢–´ –¥–ª—è {vulnerability['resource']}")
        logger.warning(f"   –£—è–∑–≤–∏–º–æ—Å—Ç—å: {vulnerability['type']}")
        logger.warning(f"   –í—Å–µ–≥–æ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {result['total_exploits']}")
        
        for cve_result in result['processed_cves']:
            if cve_result['exploits_count'] > 0:
                logger.warning(f"   {cve_result['cve_id']}: {cve_result['exploits_count']} —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å webhook –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
        # self._send_webhook_notification(vulnerability, result)
    
    def check_stale_cache(self):
        """–ü–æ–º–µ—á–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–º–µ—á–∞–µ–º –∫—ç—à —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π
            stale_date = (datetime.now() - timedelta(days=7)).isoformat()
            
            cursor.execute("""
                UPDATE cve_cache 
                SET is_stale = 1 
                WHERE last_checked < ? AND is_stale = 0
            """, (stale_date,))
            
            stale_count = cursor.rowcount
            conn.commit()
            conn.close()
            
            if stale_count > 0:
                logger.info(f"–ü–æ–º–µ—á–µ–Ω–æ {stale_count} –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞ –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞: {e}")
    
    def retry_failed_processing(self):
        """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É failed —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ò—â–µ–º failed –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
            retry_date = (datetime.now() - timedelta(hours=1)).isoformat()
            
            cursor.execute("""
                SELECT DISTINCT cp.vulnerability_id, v.description
                FROM cve_processing cp
                JOIN vulnerability v ON cp.vulnerability_id = v.id
                WHERE cp.status = 'failed' 
                AND cp.last_processed < ?
                LIMIT 10
            """, (retry_date,))
            
            failed_vulns = cursor.fetchall()
            conn.close()
            
            if failed_vulns:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä—è—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(failed_vulns)} failed —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
                
                for vuln_id, description in failed_vulns:
                    try:
                        result = self.processor.process_vulnerability(vuln_id, description)
                        logger.info(f"–ü–æ–≤—Ç–æ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–∏ {vuln_id}: {result['total_exploits']} —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ {vuln_id}: {e}")
                    
                    time.sleep(1)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ failed –æ–±—Ä–∞–±–æ—Ç–æ–∫: {e}")
    
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ CVE –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                new_vulns = self.get_new_vulnerabilities()
                
                if new_vulns:
                    self.process_new_vulnerabilities(new_vulns)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.last_check = datetime.now()
                
                # –ö–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –∏ failed –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if hasattr(self, '_cycle_count'):
                    self._cycle_count += 1
                else:
                    self._cycle_count = 1
                
                if self._cycle_count % 10 == 0:
                    self.check_stale_cache()
                    self.retry_failed_processing()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                for _ in range(self.check_interval):
                    if not self.running:
                        break
                    time.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.running:
            logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.running = True
        self.worker_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.worker_thread.start()
        
        logger.info(f"CVE –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval}s)")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.running:
            return
        
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ CVE –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        self.running = False
        
        if self.worker_thread and self.worker_thread.is_alive():
            self.worker_thread.join(timeout=30)
        
        logger.info("CVE –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            cursor.execute("""
                SELECT status, COUNT(*) 
                FROM cve_processing 
                GROUP BY status
            """)
            processing_stats = dict(cursor.fetchall())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_exploits,
                    COUNT(DISTINCT cve_id) as unique_cves,
                    COUNT(DISTINCT vulnerability_id) as vulnerable_assets
                FROM exploits
            """)
            exploit_stats = cursor.fetchone()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            cursor.execute("""
                SELECT cve_id, status, last_processed 
                FROM cve_processing 
                ORDER BY last_processed DESC 
                LIMIT 5
            """)
            recent_processing = cursor.fetchall()
            
            conn.close()
            
            return {
                'running': self.running,
                'last_check': self.last_check.isoformat(),
                'check_interval': self.check_interval,
                'processing_stats': processing_stats,
                'exploit_stats': {
                    'total_exploits': exploit_stats[0] if exploit_stats else 0,
                    'unique_cves': exploit_stats[1] if exploit_stats else 0,
                    'vulnerable_assets': exploit_stats[2] if exploit_stats else 0
                },
                'recent_processing': recent_processing
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {'running': self.running, 'error': str(e)}


class CVEProcessor:
    """–í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CVE"""
    
    def __init__(self, db_path: str = "scan_results.db"):
        self.db_path = db_path
        self.processor = VulnXProcessor(db_path)
        self.monitor = CVEMonitor(db_path)
    
    async def process_all_pending(self, limit: int = 100) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ pending —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        pending = self.processor.get_pending_vulnerabilities(limit)
        
        if not pending:
            return {'processed': 0, 'exploits_found': 0}
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(pending)} pending —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        
        total_exploits = 0
        processed_count = 0
        
        for vuln_id, description in pending:
            try:
                result = self.processor.process_vulnerability(vuln_id, description)
                total_exploits += result['total_exploits']
                processed_count += 1
                
                if result['total_exploits'] > 0:
                    logger.info(f"‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç—å {vuln_id}: {result['total_exploits']} —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ {vuln_id}: {e}")
        
        return {'processed': processed_count, 'exploits_found': total_exploits}
    
    def start_monitoring(self, interval: int = 60):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitor.check_interval = interval
        self.monitor.start()
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitor.stop()
    
    def get_exploit_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —ç–∫—Å–ø–ª–æ–π—Ç–∞–º"""
        return self.processor.get_exploit_summary()


def main():
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è CVE –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description="CVE Monitor and Processor")
    parser.add_argument('--db', default='scan_results.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--interval', type=int, default=60, help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å–µ–∫—É–Ω–¥—ã)')
    
    subparsers = parser.add_subparsers(dest='command', help='–ö–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ monitor
    monitor_parser = subparsers.add_parser('monitor', help='–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
    monitor_parser.add_argument('--daemon', action='store_true', help='–ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ')
    
    # –ö–æ–º–∞–Ω–¥–∞ process
    process_parser = subparsers.add_parser('process', help='–û–±—Ä–∞–±–æ—Ç–∫–∞ pending —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π')
    process_parser.add_argument('--limit', type=int, default=50, help='–õ–∏–º–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ status
    status_parser = subparsers.add_parser('status', help='–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ report
    report_parser = subparsers.add_parser('report', help='–û—Ç—á—ë—Ç –ø–æ —ç–∫—Å–ø–ª–æ–π—Ç–∞–º')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    level = logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    processor = CVEProcessor(args.db)
    
    if args.command == 'monitor':
        try:
            processor.start_monitoring(args.interval)
            
            if args.daemon:
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
                try:
                    while True:
                        time.sleep(60)
                        status = processor.monitor.get_status()
                        logger.info(f"–°—Ç–∞—Ç—É—Å: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {sum(status.get('processing_stats', {}).values())} CVE")
                except KeyboardInterrupt:
                    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            else:
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                try:
                    while True:
                        time.sleep(1)
                except KeyboardInterrupt:
                    pass
        finally:
            processor.stop_monitoring()
    
    elif args.command == 'process':
        async def run_processing():
            result = await processor.process_all_pending(args.limit)
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['processed']} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            print(f"–ù–∞–π–¥–µ–Ω–æ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {result['exploits_found']}")
        
        asyncio.run(run_processing())
    
    elif args.command == 'status':
        status = processor.monitor.get_status()
        print("=== –°—Ç–∞—Ç—É—Å CVE –æ–±—Ä–∞–±–æ—Ç–∫–∏ ===")
        print(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {status['running']}")
        print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {status['last_check']}")
        print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {status['check_interval']}s")
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for status_name, count in status.get('processing_stats', {}).items():
            print(f"  {status_name}: {count}")
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤:")
        exploit_stats = status.get('exploit_stats', {})
        print(f"  –í—Å–µ–≥–æ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤: {exploit_stats.get('total_exploits', 0)}")
        print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CVE: {exploit_stats.get('unique_cves', 0)}")
        print(f"  –£—è–∑–≤–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {exploit_stats.get('vulnerable_assets', 0)}")
    
    elif args.command == 'report':
        report = processor.get_exploit_report()
        print("=== –û—Ç—á—ë—Ç –ø–æ —ç–∫—Å–ø–ª–æ–π—Ç–∞–º ===")
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º:")
        for stat in report.get('stats', []):
            print(f"  {stat[3]} ({stat[4]}, {stat[5]}): {stat[0]} —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
        print(f"\n–¢–æ–ø CVE –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤:")
        for cve_stat in report.get('top_cves', []):
            print(f"  {cve_stat[0]}: {cve_stat[1]} —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ (severity: {cve_stat[2]:.1f})")
    
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
