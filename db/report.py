# db/report.py

import sqlite3
import re

def get_vulnerabilities_by_target(cursor, target):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
    """
    sql = """
        SELECT resource, vulnerability_type, description, severity, scanner, timestamp
        FROM vulnerability 
        WHERE resource LIKE ? OR resource = ?
        ORDER BY severity DESC, timestamp DESC
    """
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ target
    target_clean = target.replace("https://", "").replace("http://", "")
    cursor.execute(sql, (f"%{target_clean}%", target_clean))
    return cursor.fetchall()

def get_vulnerabilities_by_type(cursor):
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É
    """
    sql = """
        SELECT vulnerability_type, COUNT(*) as count, 
               GROUP_CONCAT(DISTINCT severity) as severities
        FROM vulnerability 
        GROUP BY vulnerability_type 
        ORDER BY count DESC
    """
    cursor.execute(sql)
    return cursor.fetchall()

def get_vulnerabilities_by_severity(cursor):
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
    """
    sql = """
        SELECT severity, COUNT(*) as count,
               GROUP_CONCAT(DISTINCT vulnerability_type) as types
        FROM vulnerability 
        GROUP BY severity 
        ORDER BY 
            CASE severity 
                WHEN 'Critical' THEN 1 
                WHEN 'High' THEN 2 
                WHEN 'Medium' THEN 3 
                WHEN 'Low' THEN 4 
                ELSE 5 
            END
    """
    cursor.execute(sql)
    return cursor.fetchall()

def get_scan_sessions(cursor):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    sql = """
        SELECT target, start_time, end_time, status
        FROM scansession 
        ORDER BY start_time DESC
    """
    cursor.execute(sql)
    return cursor.fetchall()

def show_report(cursor, target):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    """
    print("\n" + "="*60)
    print(f"–û–¢–ß–ï–¢ –ü–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Æ: {target}")
    print("="*60)
    
    # –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ —Ü–µ–ª–∏
    print("\n[1] –ù–ê–ô–î–ï–ù–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:")
    print("-" * 60)
    vulns = get_vulnerabilities_by_target(cursor, target)
    
    if not vulns:
        print("–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        for i, vuln in enumerate(vulns, 1):
            resource, vuln_type, description, severity, scanner, timestamp = vuln
            print(f"{i}. {vuln_type} ({severity})")
            print(f"   –†–µ—Å—É—Ä—Å: {resource}")
            print(f"   –°–∫–∞–Ω–µ—Ä: {scanner}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description[:100] if description else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}...")
            print(f"   –í—Ä–µ–º—è: {timestamp}")
            print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    print("\n[2] –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô:")
    print("-" * 60)
    type_stats = get_vulnerabilities_by_type(cursor)
    for vuln_type, count, severities in type_stats:
        print(f"{vuln_type}: {count} (—É—Ä–æ–≤–Ω–∏: {severities or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
    print("\n[3] –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–†–ò–¢–ò–ß–ù–û–°–¢–ò:")
    print("-" * 60)
    severity_stats = get_vulnerabilities_by_severity(cursor)
    for severity, count, types in severity_stats:
        print(f"{severity}: {count} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
    
    # –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    print("\n[4] –ò–°–¢–û–†–ò–Ø –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ô:")
    print("-" * 60)
    sessions = get_scan_sessions(cursor)
    for target, start_time, end_time, status in sessions:
        print(f"–¶–µ–ª—å: {target}")
        print(f"–°—Ç–∞—Ç—É—Å: {status}")
        print(f"–ù–∞—á–∞–ª–æ: {start_time}")
        if end_time:
            print(f"–ö–æ–Ω–µ—Ü: {end_time}")
        print()

def show_summary(cursor):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    """
    print("\n" + "="*40)
    print("–ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê")
    print("="*40)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    cursor.execute("SELECT COUNT(*) FROM vulnerability")
    total_vulns = cursor.fetchone()[0]
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    cursor.execute("SELECT COUNT(*) FROM vulnerability WHERE severity = 'Critical'")
    critical_vulns = cursor.fetchone()[0]
    
    # –í—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    cursor.execute("SELECT COUNT(*) FROM vulnerability WHERE severity = 'High'")
    high_vulns = cursor.fetchone()[0]
    
    print(f"–í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {total_vulns}")
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {critical_vulns}")
    print(f"–í—ã—Å–æ–∫–∏—Ö: {high_vulns}")
    
    if critical_vulns > 0 or high_vulns > 0:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏!")
    else:
        print("\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

def generate_summary_report(cursor, target=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç —Å —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if target:
            cursor.execute("""
                SELECT vulnerability_type, severity, description 
                FROM vulnerability 
                WHERE resource LIKE ? 
                ORDER BY 
                    CASE severity 
                        WHEN 'Critical' THEN 1 
                        WHEN 'High' THEN 2 
                        WHEN 'Medium' THEN 3 
                        WHEN 'Low' THEN 4 
                        WHEN 'info' THEN 5 
                        ELSE 6 
                    END
            """, (f'%{target}%',))
        else:
            cursor.execute("""
                SELECT vulnerability_type, severity, description 
                FROM vulnerability 
                ORDER BY 
                    CASE severity 
                        WHEN 'Critical' THEN 1 
                        WHEN 'High' THEN 2 
                        WHEN 'Medium' THEN 3 
                        WHEN 'Low' THEN 4 
                        WHEN 'info' THEN 5 
                        ELSE 6 
                    END
            """)
        
        vulnerabilities = cursor.fetchall()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        severity_counts = {}
        type_counts = {}
        cve_list = []
        
        for vuln_type, severity, description in vulnerabilities:
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
            type_counts[vuln_type] = type_counts.get(vuln_type, 0) + 1
            
            # –°–æ–±–∏—Ä–∞–µ–º CVE
            if 'CVE-' in description:
                cve_match = re.search(r'CVE-\d{4}-\d+', description)
                if cve_match:
                    cve_id = cve_match.group(0)
                    cvss_match = re.search(r'(\d+\.\d+)', description)
                    cvss_score = cvss_match.group(1) if cvss_match else "N/A"
                    cve_list.append(f"{cve_id} ({cvss_score})")
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã CVE
        cve_list = list(set(cve_list))
        cve_list.sort()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = []
        report.append("=" * 60)
        report.append("–ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –ü–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Æ")
        report.append("=" * 60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        report.append("\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:")
        report.append("-" * 40)
        
        if 'Critical' in severity_counts:
            report.append(f"üî¥ Critical: {severity_counts['Critical']}")
        if 'High' in severity_counts:
            report.append(f"üî¥ High: {severity_counts['High']}")
        if 'Medium' in severity_counts:
            report.append(f"üü° Medium: {severity_counts['Medium']}")
        if 'Low' in severity_counts:
            report.append(f"üü¢ Low: {severity_counts['Low']}")
        if 'info' in severity_counts:
            report.append(f"‚ÑπÔ∏è Info: {severity_counts['info']}")
        
        # –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
        if cve_list:
            report.append(f"\nüîë –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:")
            report.append("-" * 40)
            report.append(f"üî¥ CVE —É—è–∑–≤–∏–º–æ—Å—Ç–∏ ({len(cve_list)}):")
            for cve in cve_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                report.append(f"   ‚Ä¢ {cve}")
            if len(cve_list) > 10:
                report.append(f"   ... –∏ –µ—â–µ {len(cve_list) - 10} CVE")
        
        # –¢–æ–ø —Ç–∏–ø–æ–≤ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        report.append(f"\nüìä –¢–û–ü –¢–ò–ü–û–í –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô:")
        report.append("-" * 40)
        sorted_types = sorted(type_counts.items(), key=lambda x: x[1], reverse=True)
        for vuln_type, count in sorted_types[:5]:
            report.append(f"   ‚Ä¢ {vuln_type}: {count}")
        
        report.append("\n" + "=" * 60)
        
        return "\n".join(report)
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"

def show_summary_report(target=None, db_file="scan_results.db"):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    """
    try:
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()
        
        report = generate_summary_report(cursor, target)
        print(report)
        
        conn.close()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—Ç—á–µ—Ç–∞: {e}")
