# db/vulnerability_manager.py

import logging
import hashlib
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime
import json

from scanner.ai_parser import AIVulnerabilityParser
from db.models import Vulnerability

logger = logging.getLogger(__name__)

class VulnerabilityStats:
    """Статистика операций с уязвимостями"""
    
    def __init__(self):
        self.reset()
    
    def reset(self):
        self.processed = 0
        self.saved_new = 0
        self.duplicates_skipped = 0
        self.validation_errors = 0
        self.processing_errors = 0
        self.start_time = datetime.now()
    
    def get_summary(self) -> Dict[str, Any]:
        duration = (datetime.now() - self.start_time).total_seconds()
        return {
            'duration_seconds': round(duration, 2),
            'processed': self.processed,
            'saved_new': self.saved_new,
            'duplicates_skipped': self.duplicates_skipped,
            'validation_errors': self.validation_errors,
            'processing_errors': self.processing_errors,
            'success_rate': round((self.saved_new / max(self.processed, 1)) * 100, 2)
        }


class VulnerabilityManager:
    """
    Центральный класс для управления уязвимостями
    Обеспечивает единообразную обработку, валидацию и сохранение
    """
    
    def __init__(self):
        self.ai_parser = AIVulnerabilityParser()
        self.stats = VulnerabilityStats()
        
        # Кэш для дедупликации в рамках одной сессии
        self._session_cache = set()
    
    def reset_session_cache(self):
        """Сбрасывает кэш сессии (используется между сканированиями)"""
        self._session_cache.clear()
        self.stats.reset()
    
    def _generate_vulnerability_hash(self, vuln: Dict[str, Any]) -> str:
        """
        Генерирует хеш для дедупликации уязвимостей
        Использует ресурс, тип уязвимости и первые 100 символов описания
        """
        content = f"{vuln.get('resource', '')}{vuln.get('vulnerability_type', '')}{vuln.get('description', '')[:100]}"
        return hashlib.md5(content.encode('utf-8')).hexdigest()
    
    def _validate_vulnerability(self, vuln: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """
        Валидирует данные уязвимости
        Returns: (is_valid, error_message)
        """
        # Обязательные поля
        required_fields = ['resource', 'vulnerability_type']
        for field in required_fields:
            if not vuln.get(field):
                return False, f"Обязательное поле '{field}' отсутствует или пустое"
        
        # Валидные уровни критичности
        valid_severities = ['Critical', 'High', 'Medium', 'Low', 'Info', 'Unknown']
        severity = vuln.get('severity', 'Medium')
        if severity not in valid_severities:
            return False, f"Неизвестный уровень критичности: {severity}"
        
        # Проверка длины полей
        max_lengths = {
            'resource': 500,
            'vulnerability_type': 200,
            'description': 2000,
            'severity': 20,
            'scanner': 50
        }
        
        for field, max_length in max_lengths.items():
            value = str(vuln.get(field, ''))
            if len(value) > max_length:
                return False, f"Поле '{field}' превышает максимальную длину {max_length}"
        
        return True, None
    
    def _check_duplicate_in_db(self, vuln_hash: str, cursor) -> bool:
        """Проверяет наличие дубликата в базе данных"""
        try:
            cursor.execute("""
                SELECT 1 FROM vulnerability 
                WHERE resource = ? AND vulnerability_type = ? AND description = ?
                LIMIT 1
            """, (
                vuln_hash[:500],  # Используем часть хеша как приблизительный фильтр
                vuln_hash[500:700] if len(vuln_hash) > 500 else '',
                vuln_hash[700:] if len(vuln_hash) > 700 else ''
            ))
            return cursor.fetchone() is not None
        except Exception as e:
            logger.warning(f"Ошибка проверки дубликата в БД: {e}")
            return False
    
    def _check_duplicate_comprehensive(self, vuln: Dict[str, Any], cursor) -> bool:
        """
        Комплексная проверка дубликатов
        1. Проверка в кэше сессии
        2. Проверка в базе данных
        """
        vuln_hash = self._generate_vulnerability_hash(vuln)
        
        # Проверка в кэше сессии
        if vuln_hash in self._session_cache:
            return True
        
        # Проверка точного совпадения в БД
        try:
            cursor.execute("""
                SELECT 1 FROM vulnerability 
                WHERE resource = ? AND vulnerability_type = ? 
                AND substr(description, 1, 100) = ? 
                LIMIT 1
            """, (
                vuln.get('resource', ''),
                vuln.get('vulnerability_type', ''),
                vuln.get('description', '')[:100]
            ))
            
            is_duplicate = cursor.fetchone() is not None
            
            if not is_duplicate:
                # Добавляем в кэш сессии, если не дубликат
                self._session_cache.add(vuln_hash)
            
            return is_duplicate
            
        except Exception as e:
            logger.warning(f"Ошибка проверки дубликата: {e}")
            return False
    
    def process_and_save_vulnerabilities(
        self, 
        raw_data: Any, 
        scanner_name: str, 
        cursor, 
        session_id: Optional[int] = None,
        target_resource: Optional[str] = None
    ) -> VulnerabilityStats:
        """
        Основной метод обработки и сохранения уязвимостей
        
        Args:
            raw_data: Сырые данные от сканера
            scanner_name: Имя сканера (nuclei, wapiti, nmap, etc.)
            cursor: Курсор базы данных
            session_id: ID сессии сканирования (опционально)
            target_resource: Целевой ресурс (для fallback)
        
        Returns:
            VulnerabilityStats: Статистика обработки
        """
        self.stats.reset()
        
        logger.info(f"Начинаем обработку данных от {scanner_name}")
        
        try:
            # Парсим данные через AI парсер
            vulnerabilities = self.ai_parser.parse_scanner_output(raw_data, scanner_name)
            
            if not vulnerabilities:
                if scanner_name in ['contacts', 'nmap']:
                    logger.info(f"Сканер {scanner_name} не нашёл уязвимостей (это нормально)")
                else:
                    logger.warning(f"Не удалось извлечь уязвимости из данных {scanner_name}")
                return self.stats
            
            logger.info(f"AI парсер извлек {len(vulnerabilities)} потенциальных уязвимостей")
            
            # Обрабатываем каждую уязвимость
            for vuln in vulnerabilities:
                self.stats.processed += 1
                
                try:
                    # Дополняем данные
                    if not vuln.get('resource') and target_resource:
                        vuln['resource'] = target_resource
                    
                    if not vuln.get('scanner'):
                        vuln['scanner'] = scanner_name
                    
                    # Нормализуем severity (приводим к стандартному формату)
                    if vuln.get('severity'):
                        severity = vuln['severity'].strip()
                        # Приводим к правильному регистру
                        severity_mapping = {
                            'critical': 'Critical',
                            'high': 'High', 
                            'medium': 'Medium',
                            'low': 'Low',
                            'info': 'Info',
                            'informational': 'Info',
                            'unknown': 'Unknown'
                        }
                        vuln['severity'] = severity_mapping.get(severity.lower(), severity.title())
                    
                    # Валидация
                    is_valid, error_msg = self._validate_vulnerability(vuln)
                    if not is_valid:
                        logger.warning(f"Валидация не пройдена: {error_msg}")
                        self.stats.validation_errors += 1
                        continue
                    
                    # Проверка дубликатов
                    if self._check_duplicate_comprehensive(vuln, cursor):
                        logger.debug(f"Пропущен дубликат: {vuln['vulnerability_type']} в {vuln['resource']}")
                        self.stats.duplicates_skipped += 1
                        continue
                    
                    # Сохранение в БД
                    Vulnerability.insert(
                        cursor,
                        resource=vuln['resource'],
                        vulnerability_type=vuln['vulnerability_type'],
                        description=vuln.get('description', ''),
                        severity=vuln.get('severity', 'Medium'),
                        scanner=vuln['scanner']
                    )
                    
                    self.stats.saved_new += 1
                    logger.debug(f"Сохранена уязвимость: {vuln['vulnerability_type']} ({vuln['severity']}) в {vuln['resource']}")
                    
                except Exception as e:
                    logger.error(f"Ошибка обработки уязвимости: {e}")
                    logger.debug(f"Проблемная уязвимость: {json.dumps(vuln, ensure_ascii=False, indent=2)}")
                    self.stats.processing_errors += 1
                    continue
            
            # Логируем итоговую статистику
            summary = self.stats.get_summary()
            logger.info(f"Обработка завершена за {summary['duration_seconds']}s:")
            logger.info(f"  Обработано: {summary['processed']}")
            logger.info(f"  Сохранено новых: {summary['saved_new']}")
            logger.info(f"  Пропущено дубликатов: {summary['duplicates_skipped']}")
            logger.info(f"  Ошибок валидации: {summary['validation_errors']}")
            logger.info(f"  Ошибок обработки: {summary['processing_errors']}")
            logger.info(f"  Успешность: {summary['success_rate']}%")
            
            return self.stats
            
        except Exception as e:
            logger.error(f"Критическая ошибка обработки данных {scanner_name}: {e}")
            self.stats.processing_errors += 1
            return self.stats
    
    def get_vulnerability_summary(self, cursor, target: Optional[str] = None) -> Dict[str, Any]:
        """
        Получает сводку по уязвимостям
        """
        try:
            base_query = "SELECT severity, COUNT(*) as count FROM vulnerability"
            params = []
            
            if target:
                base_query += " WHERE resource LIKE ?"
                params.append(f"%{target}%")
            
            base_query += " GROUP BY severity ORDER BY CASE severity WHEN 'Critical' THEN 1 WHEN 'High' THEN 2 WHEN 'Medium' THEN 3 WHEN 'Low' THEN 4 ELSE 5 END"
            
            cursor.execute(base_query, params)
            severity_counts = dict(cursor.fetchall())
            
            # Общее количество
            total_query = "SELECT COUNT(*) FROM vulnerability"
            if target:
                total_query += " WHERE resource LIKE ?"
            
            cursor.execute(total_query, params)
            total_count = cursor.fetchone()[0]
            
            return {
                'total': total_count,
                'by_severity': severity_counts,
                'critical_and_high': severity_counts.get('Critical', 0) + severity_counts.get('High', 0)
            }
            
        except Exception as e:
            logger.error(f"Ошибка получения сводки уязвимостей: {e}")
            return {'total': 0, 'by_severity': {}, 'critical_and_high': 0}
