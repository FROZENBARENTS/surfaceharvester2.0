#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–µ
"""

import os
import re
import sqlite3
from pathlib import Path

def check_file_for_db_references(file_path, expected_db="scan_results.db"):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    issues = []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_patterns = [
            r'test_scan\.db',
            r'test_db.*\.db'
        ]
        
        for pattern in db_patterns:
            matches = re.finditer(pattern, content, re.IGNORECASE)
            for match in matches:
                line_num = content[:match.start()].count('\n') + 1
                issues.append(f"  ‚ùå –°—Ç—Ä–æ–∫–∞ {line_num}: –Ω–∞–π–¥–µ–Ω–æ '{match.group()}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        correct_refs = content.count(expected_db)
        if correct_refs > 0:
            issues.append(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {correct_refs} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ '{expected_db}'")
            
    except Exception as e:
        issues.append(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    return issues

def check_database_file():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    db_file = "scan_results.db"
    
    if not os.path.exists(db_file):
        print(f"‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_file}")
        print(f"üìã –¢–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        main_tables = ['vulnerability', 'scansession', 'host', 'subdomain']
        for table in main_tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"   üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_project_files():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î
    """
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)
    
    # –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_to_check = [
        "config.py",
        "cli.py", 
        "main.py",
        "db/schema.py",
        "db/models.py",
        "scanner/full_scanner.py",
        "scanner/cve_monitor.py",
        "scanner/vulnx_processor.py",
        "reports_manager.py",
        "reports.py"
    ]
    
    issues_found = False
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ {file_path}:")
            issues = check_file_for_db_references(file_path)
            
            if issues:
                for issue in issues:
                    print(issue)
                issues_found = True
            else:
                print("  ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"\nüìÑ {file_path}: ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return not issues_found

def check_test_files():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    """
    print("\nüß™ –ü–†–û–í–ï–†–ö–ê –¢–ï–°–¢–û–í–´–• –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    test_files = [
        "simple_db_test.py",
        "debug_scan_results.py", 
        "check_scan_results.py",
        "merge_databases.py"
    ]
    
    issues_found = False
    
    for file_path in test_files:
        if os.path.exists(file_path):
            print(f"\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ {file_path}:")
            issues = check_file_for_db_references(file_path)
            
            if issues:
                for issue in issues:
                    print(issue)
                issues_found = True
            else:
                print("  ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"\nüìÑ {file_path}: ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return not issues_found

def check_documentation():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    """
    print("\nüìö –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
    print("=" * 60)
    
    doc_files = [
        "README.md",
        "REPORTS_README.md",
        "QUICK_START_REPORTS.md",
        "db_functions_report.md"
    ]
    
    issues_found = False
    
    for file_path in doc_files:
        if os.path.exists(file_path):
            print(f"\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ {file_path}:")
            issues = check_file_for_db_references(file_path)
            
            if issues:
                for issue in issues:
                    print(issue)
                issues_found = True
            else:
                print("  ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"\nüìÑ {file_path}: ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return not issues_found

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    print("üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_ok = check_database_file()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    project_ok = check_project_files()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    tests_ok = check_test_files()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    docs_ok = check_documentation()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 60)
    
    if db_ok and project_ok and tests_ok and docs_ok:
        print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üéâ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ scan_results.db")
    else:
        print("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        if not db_ok:
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        if not project_ok:
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞")
        if not tests_ok:
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö")
        if not docs_ok:
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç scan_results.db")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç scan_results.db")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")

if __name__ == "__main__":
    main()
