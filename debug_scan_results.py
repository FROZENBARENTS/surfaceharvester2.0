#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–ø–∏—Å—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sqlite3
import os
import sys
from datetime import datetime

def debug_scan_session(db_file="scan_results.db", session_id=1):
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê –°–ï–°–°–ò–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø ID: {session_id}")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        cursor.execute("""
            SELECT target, start_time, end_time, status 
            FROM scansession 
            WHERE id = ?
        """, (session_id,))
        
        session = cursor.fetchone()
        if not session:
            print(f"‚ùå –°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        target, start_time, end_time, status = session
        print(f"üéØ –¶–µ–ª—å: {target}")
        print(f"üìÖ –ù–∞—á–∞–ª–æ: {start_time}")
        print(f"üìÖ –ö–æ–Ω–µ—Ü: {end_time}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        print(f"\nüîó –°–í–Ø–ó–ê–ù–ù–´–ï –ó–ê–ü–ò–°–ò:")
        
        # –•–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        cursor.execute("""
            SELECT hostname, ip_address, type, source 
            FROM host 
            WHERE session_id = ?
        """, (session_id,))
        
        hosts = cursor.fetchall()
        print(f"üìã –•–æ—Å—Ç—ã ({len(hosts)}):")
        for host in hosts:
            print(f"   ‚Ä¢ {host[0]} ({host[2]}) - {host[3]}")
        
        # –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏
        cursor.execute("""
            SELECT vulnerability_type, severity, scanner, timestamp 
            FROM vulnerability 
            WHERE resource LIKE ? 
            ORDER BY severity DESC
        """, (f'%{target.replace("https://", "").replace("http://", "")}%',))
        
        vulns = cursor.fetchall()
        print(f"üîç –£—è–∑–≤–∏–º–æ—Å—Ç–∏ ({len(vulns)}):")
        for vuln in vulns:
            print(f"   ‚Ä¢ {vuln[0]} ({vuln[1]}) - {vuln[2]}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

def check_vulnerability_insertion():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–¢–ê–í–ö–ò –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–∞
    test_db = "debug_temp.db"
    
    try:
        conn = sqlite3.connect(test_db)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS vulnerability (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                resource TEXT NOT NULL,
                vulnerability_type TEXT NOT NULL,
                description TEXT,
                severity TEXT DEFAULT 'Medium',
                scanner TEXT NOT NULL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS scansession (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                target TEXT NOT NULL,
                start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
                end_time DATETIME,
                status TEXT DEFAULT 'running'
            )
        """)
        
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–µ—Å—Ç 1: –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        print("\n1. –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:")
        try:
            cursor.execute("""
                INSERT INTO vulnerability (resource, vulnerability_type, description, severity, scanner)
                VALUES (?, ?, ?, ?, ?)
            """, (
                "https://demo.owasp-juice.shop/",
                "SQL Injection",
                "Test vulnerability for debugging",
                "High",
                "nuclei"
            ))
            conn.commit()
            print("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç—å –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º
            cursor.execute("SELECT COUNT(*) FROM vulnerability")
            count = cursor.fetchone()[0]
            print(f"üìä –í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –ë–î: {count}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {e}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —á–∏—Ç–∞—é—Ç—Å—è
        print("\n2. –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
        try:
            cursor.execute("""
                SELECT resource, vulnerability_type, severity, scanner 
                FROM vulnerability 
                WHERE resource LIKE ?
            """, ("%demo.owasp-juice.shop%",))
            
            results = cursor.fetchall()
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
            for result in results:
                print(f"   ‚Ä¢ {result[1]} ({result[2]}) - {result[3]}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        if os.path.exists(test_db):
            os.unlink(test_db)
            print(f"\nüóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –ë–î —É–¥–∞–ª–µ–Ω–∞")

def compare_databases():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ë–ê–ó –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    db1 = "scan_results.db"
    db2 = "scan_results.db.backup_20250819_201518"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    if not os.path.exists(db1) or not os.path.exists(db2):
        print("‚ùå –û–¥–Ω–∞ –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±–µ–∏–º –ë–î
        conn1 = sqlite3.connect(db1)
        conn2 = sqlite3.connect(db2)
        cursor1 = conn1.cursor()
        cursor2 = conn2.cursor()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = ['vulnerability', 'scansession', 'host', 'subdomain']
        
        for table in tables:
            print(f"\nüìä –¢–ê–ë–õ–ò–¶–ê: {table}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor1.execute(f"SELECT COUNT(*) FROM {table}")
            count1 = cursor1.fetchone()[0]
            
            cursor2.execute(f"SELECT COUNT(*) FROM {table}")
            count2 = cursor2.fetchone()[0]
            
            print(f"   scan_results.db: {count1} –∑–∞–ø–∏—Å–µ–π")
            print(f"   backup.db: {count2} –∑–∞–ø–∏—Å–µ–π")
            
            if count1 != count2:
                print(f"   ‚ö†Ô∏è –†–∞–∑–ª–∏—á–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π!")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            if count1 > 0:
                cursor1.execute(f"SELECT * FROM {table} LIMIT 3")
                rows1 = cursor1.fetchall()
                print(f"   üìù –ü—Ä–∏–º–µ—Ä—ã –∏–∑ scan_results.db:")
                for i, row in enumerate(rows1, 1):
                    print(f"      {i}. {row}")
            
            if count2 > 0:
                cursor2.execute(f"SELECT * FROM {table} LIMIT 3")
                rows2 = cursor2.fetchall()
                print(f"   üìù –ü—Ä–∏–º–µ—Ä—ã –∏–∑ backup.db:")
                for i, row in enumerate(rows2, 1):
                    print(f"      {i}. {row}")
        
        conn1.close()
        conn2.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –û–¢–õ–ê–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –û—Ç–ª–∞–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é
    debug_scan_session("scan_results.db", 1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    check_vulnerability_insertion()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    compare_databases()
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫–∞–Ω–µ—Ä—ã (nuclei, nmap, gobuster) —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å verbose —Ä–µ–∂–∏–º–æ–º")

if __name__ == "__main__":
    main()
