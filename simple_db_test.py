#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–ø–∏—Å–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import tempfile
import os
import sys

def test_basic_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î"""
    
    print("üß™ –¢–ï–°–¢ –ë–ê–ó–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    db_path = tempfile.mktemp(suffix='.db')
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            CREATE TABLE vulnerability (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                resource TEXT NOT NULL,
                vulnerability_type TEXT NOT NULL,
                description TEXT,
                severity TEXT DEFAULT 'Medium',
                scanner TEXT NOT NULL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        cursor.execute("""
            CREATE TABLE scansession (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                target TEXT NOT NULL,
                start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
                end_time DATETIME,
                status TEXT DEFAULT 'running'
            )
        """)
        
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
        print("\nüìù –¢–ï–°–¢ –ó–ê–ü–ò–°–ò:")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        cursor.execute("""
            INSERT INTO scansession (target, status) 
            VALUES (?, ?)
        """, ("http://test.com", "completed"))
        session_id = cursor.lastrowid
        print(f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞, ID: {session_id}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        test_vulns = [
            ("http://test.com", "SQL Injection", "Test SQL injection", "High", "nuclei"),
            ("http://test.com/admin", "XSS", "Test XSS", "Medium", "nuclei"),
            ("http://test.com/api", "SSRF", "Test SSRF", "Critical", "nuclei")
        ]
        
        for vuln in test_vulns:
            cursor.execute("""
                INSERT INTO vulnerability (resource, vulnerability_type, description, severity, scanner)
                VALUES (?, ?, ?, ?, ?)
            """, vuln)
        
        conn.commit()
        print(f"‚úÖ {len(test_vulns)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–ø–∏—Å–∞–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        print("\nüìñ –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
        cursor.execute("SELECT COUNT(*) FROM vulnerability")
        vuln_count = cursor.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {vuln_count}")
        
        cursor.execute("SELECT COUNT(*) FROM scansession")
        session_count = cursor.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {session_count}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ —Ü–µ–ª–∏
        cursor.execute("""
            SELECT vulnerability_type, severity, scanner 
            FROM vulnerability 
            WHERE resource LIKE ?
            ORDER BY severity DESC
        """, ("%test.com%",))
        
        vulns = cursor.fetchall()
        print(f"\nüîç –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è test.com ({len(vulns)}):")
        for i, vuln in enumerate(vulns, 1):
            vuln_type, severity, scanner = vuln
            print(f"   {i}. {vuln_type} ({severity}) - {scanner}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        cursor.execute("""
            SELECT severity, COUNT(*) as count 
            FROM vulnerability 
            GROUP BY severity 
            ORDER BY CASE severity 
                WHEN 'Critical' THEN 1 
                WHEN 'High' THEN 2 
                WHEN 'Medium' THEN 3 
                ELSE 4 
            END
        """)
        
        severity_stats = cursor.fetchall()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:")
        for severity, count in severity_stats:
            print(f"   ‚Ä¢ {severity}: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–∞–Ω–µ—Ä–∞–º
        cursor.execute("""
            SELECT scanner, COUNT(*) as count 
            FROM vulnerability 
            GROUP BY scanner 
            ORDER BY count DESC
        """)
        
        scanner_stats = cursor.fetchall()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–∞–Ω–µ—Ä–∞–º:")
        for scanner, count in scanner_stats:
            print(f"   ‚Ä¢ {scanner}: {count}")
        
        conn.close()
        print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
        try:
            if os.path.exists(db_path):
                os.unlink(db_path)
                print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ë–î —É–¥–∞–ª–µ–Ω–∞: {db_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î: {e}")

def test_existing_db_readonly():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏—è"""
    
    print(f"\nüìñ –¢–ï–°–¢ –ß–¢–ï–ù–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ë–î (–¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï)")
    print("=" * 60)
    
    db_files = ["scan_results.db"]
    
    for db_file in db_files:
        if not os.path.exists(db_file):
            print(f"‚ö†Ô∏è –§–∞–π–ª {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {db_file}:")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏—è
            conn = sqlite3.connect(f"file:{db_file}?mode=ro", uri=True)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            print(f"   üìã –¢–∞–±–ª–∏—Ü: {len(tables)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º vulnerability
            cursor.execute("SELECT COUNT(*) FROM vulnerability")
            vuln_count = cursor.fetchone()[0]
            print(f"   üîç –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {vuln_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º scansession
            cursor.execute("SELECT COUNT(*) FROM scansession")
            session_count = cursor.fetchone()[0]
            print(f"   üìä –°–µ—Å—Å–∏–π: {session_count}")
            
            if vuln_count > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
                cursor.execute("""
                    SELECT vulnerability_type, severity, scanner 
                    FROM vulnerability 
                    LIMIT 3
                """)
                examples = cursor.fetchall()
                print(f"   üìù –ü—Ä–∏–º–µ—Ä—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:")
                for i, example in enumerate(examples, 1):
                    vuln_type, severity, scanner = example
                    print(f"      {i}. {vuln_type} ({severity}) - {scanner}")
            
            conn.close()
            print(f"   ‚úÖ –ß—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    test_basic_operations()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ë–î
    test_existing_db_readonly()
    
    print(f"\nüí° –í–´–í–û–î–´:")
    print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö scan_results.db —Å–æ–¥–µ—Ä–∂–∏—Ç 82 —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É")
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

if __name__ == "__main__":
    main()
