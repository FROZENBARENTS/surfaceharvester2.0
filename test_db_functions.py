#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import tempfile
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from db.models import Vulnerability, ScanSession, Host, Subdomain, CVE, Exploits
from db.vulnerability_manager import VulnerabilityManager
from db.report import get_vulnerabilities_by_target, get_scan_sessions, list_targets
from scanner.ai_parser import AIVulnerabilityParser

def test_vulnerability_insertion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ó–ê–ü–ò–°–ò –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    db_path = tempfile.mktemp(suffix='.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        Vulnerability.create_table(cursor)
        ScanSession.create_table(cursor)
        Host.create_table(cursor)
        Subdomain.create_table(cursor)
        CVE.create_table(cursor)
        Exploits.create_table(cursor)
        conn.commit()
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 1: –ü—Ä—è–º–∞—è –≤—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
        print("\n1. –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –≤—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å Vulnerability:")
        try:
            Vulnerability.insert(
                cursor,
                resource="http://example.com",
                vulnerability_type="SQL Injection",
                description="SQL injection vulnerability found in login form",
                severity="High",
                scanner="nuclei"
            )
            conn.commit()
            print("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å
            cursor.execute("SELECT * FROM vulnerability WHERE resource = ?", ("http://example.com",))
            result = cursor.fetchone()
            if result:
                print(f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞: {result}")
            else:
                print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
        
        # –¢–µ—Å—Ç 2: –í—Å—Ç–∞–≤–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        print("\n2. –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π:")
        try:
            Vulnerability.insert_validated(
                cursor,
                resource="http://test.com/admin",
                vulnerability_type="XSS",
                description="Cross-site scripting vulnerability",
                severity="Medium",
                scanner="nuclei"
            )
            conn.commit()
            print("‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        
        # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print("\n3. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å —Ç—É –∂–µ —É—è–∑–≤–∏–º–æ—Å—Ç—å
            Vulnerability.insert_validated(
                cursor,
                resource="http://example.com",
                vulnerability_type="SQL Injection",
                description="SQL injection vulnerability found in login form",
                severity="High",
                scanner="nuclei"
            )
            print("‚ùå –î—É–±–ª–∏–∫–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        except Exception as e:
            print(f"‚úÖ –î—É–±–ª–∏–∫–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e}")
        
        # –¢–µ—Å—Ç 4: VulnerabilityManager
        print("\n4. –¢–µ—Å—Ç VulnerabilityManager:")
        try:
            vuln_manager = VulnerabilityManager()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–∫–∞–Ω–µ—Ä–∞
            test_data = [
                {
                    "resource": "http://demo.com",
                    "vulnerability_type": "LFI",
                    "description": "Local file inclusion vulnerability",
                    "severity": "Critical",
                    "scanner": "nuclei"
                },
                {
                    "resource": "http://demo.com/api",
                    "vulnerability_type": "SSRF",
                    "description": "Server-side request forgery",
                    "severity": "High",
                    "scanner": "nuclei"
                }
            ]
            
            stats = vuln_manager.process_and_save_vulnerabilities(
                raw_data=test_data,
                scanner_name='nuclei',
                cursor=cursor,
                session_id=1,
                target_resource="http://demo.com"
            )
            
            print(f"‚úÖ VulnerabilityManager –æ–±—Ä–∞–±–æ—Ç–∞–ª {stats.processed} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats.saved_new}")
            print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {stats.duplicates_skipped}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ VulnerabilityManager: {e}")
        
        conn.commit()
        
    finally:
        conn.close()
        os.unlink(db_path)
        print(f"\nüóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ë–î —É–¥–∞–ª–µ–Ω–∞: {db_path}")

def test_data_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    db_path = tempfile.mktemp(suffix='.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        Vulnerability.create_table(cursor)
        ScanSession.create_table(cursor)
        Host.create_table(cursor)
        Subdomain.create_table(cursor)
        CVE.create_table(cursor)
        Exploits.create_table(cursor)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_vulnerabilities = [
            ("http://example.com", "SQL Injection", "SQL injection in login", "High", "nuclei"),
            ("http://example.com/admin", "XSS", "Cross-site scripting", "Medium", "nuclei"),
            ("http://test.com", "LFI", "Local file inclusion", "Critical", "nuclei"),
            ("http://demo.com/api", "SSRF", "Server-side request forgery", "High", "nuclei"),
            ("http://demo.com", "Path Traversal", "Directory traversal", "Low", "nuclei")
        ]
        
        for vuln in test_vulnerabilities:
            Vulnerability.insert(cursor, 
                               resource=vuln[0],
                               vulnerability_type=vuln[1],
                               description=vuln[2],
                               severity=vuln[3],
                               scanner=vuln[4])
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
        ScanSession.insert(cursor, target="http://example.com", status="completed")
        ScanSession.insert(cursor, target="http://test.com", status="completed")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ö–æ—Å—Ç—ã
        Host.insert(cursor, hostname="example.com", ip_address="93.184.216.34", type="domain")
        Host.insert(cursor, hostname="test.com", ip_address="104.16.124.96", type="domain")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—É–±–¥–æ–º–µ–Ω—ã
        Subdomain.insert(cursor, name="admin.example.com", parent_domain="example.com")
        Subdomain.insert(cursor, name="api.example.com", parent_domain="example.com")
        
        conn.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –¢–µ—Å—Ç 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ —Ü–µ–ª–∏
        print("\n1. –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ —Ü–µ–ª–∏:")
        try:
            vulns = get_vulnerabilities_by_target(cursor, "example.com")
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(vulns)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è example.com")
            for i, vuln in enumerate(vulns, 1):
                print(f"   {i}. {vuln[1]} ({vuln[3]}) - {vuln[0]}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {e}")
        
        # –¢–µ—Å—Ç 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\n2. –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        try:
            sessions = get_scan_sessions(cursor)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(sessions)} —Å–µ—Å—Å–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            for i, session in enumerate(sessions, 1):
                print(f"   {i}. {session[0]} - {session[3]}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
        
        # –¢–µ—Å—Ç 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π
        print("\n3. –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π:")
        try:
            targets = list_targets(cursor)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(targets)} —Ü–µ–ª–µ–π")
            for target in targets:
                print(f"   ‚Ä¢ {target}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–ª–µ–π: {e}")
        
        # –¢–µ—Å—Ç 4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—É–±–¥–æ–º–µ–Ω–æ–≤
        print("\n4. –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—É–±–¥–æ–º–µ–Ω–æ–≤:")
        try:
            subdomains = list_targets(cursor, only_subdomains=True)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(subdomains)} —Å—É–±–¥–æ–º–µ–Ω–æ–≤")
            for subdomain in subdomains:
                print(f"   ‚Ä¢ {subdomain}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–±–¥–æ–º–µ–Ω–æ–≤: {e}")
        
        # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        print("\n5. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:")
        try:
            stats = Vulnerability.get_stats_by_severity(cursor)
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:")
            for severity, count in stats:
                print(f"   ‚Ä¢ {severity}: {count}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        # –¢–µ—Å—Ç 6: VulnerabilityManager summary
        print("\n6. –¢–µ—Å—Ç VulnerabilityManager summary:")
        try:
            vuln_manager = VulnerabilityManager()
            summary = vuln_manager.get_vulnerability_summary(cursor)
            print(f"‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {summary['total']}")
            print(f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö: {summary['critical_and_high']}")
            print(f"   ‚Ä¢ –ü–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: {summary['by_severity']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ summary: {e}")
        
        # –¢–µ—Å—Ç 7: –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –º–æ–¥–µ–ª—è–º
        print("\n7. –¢–µ—Å—Ç –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –º–æ–¥–µ–ª—è–º:")
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            all_vulns = Vulnerability.select_all(cursor)
            print(f"‚úÖ –í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –ë–î: {len(all_vulns)}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ ID
            if all_vulns:
                first_vuln = Vulnerability.select_by_id(cursor, all_vulns[0][0])
                print(f"‚úÖ –ü–µ—Ä–≤–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –ø–æ ID: {first_vuln[1]} ({first_vuln[3]})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        
    finally:
        conn.close()
        os.unlink(db_path)
        print(f"\nüóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ë–î —É–¥–∞–ª–µ–Ω–∞: {db_path}")

def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("=" * 60)
    
    db_path = tempfile.mktemp(suffix='.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        Vulnerability.create_table(cursor)
        conn.commit()
        
        # –¢–µ—Å—Ç 1: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\n1. –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        try:
            Vulnerability.insert_validated(
                cursor,
                resource="",  # –ü—É—Å—Ç–æ–π —Ä–µ—Å—É—Ä—Å
                vulnerability_type="Test",
                severity="Invalid"  # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
            )
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã: {e}")
        
        # –¢–µ—Å—Ç 2: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–ª—è
        print("\n2. –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–ª–µ–π:")
        try:
            Vulnerability.insert_validated(
                cursor,
                resource="x" * 600,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å
                vulnerability_type="Test",
                description="x" * 2500  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            )
            print("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"‚úÖ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã: {e}")
        
        # –¢–µ—Å—Ç 3: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        print("\n3. –¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:")
        try:
            Vulnerability.insert_validated(
                cursor,
                # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç resource
                vulnerability_type="Test"
            )
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã: {e}")
        
    finally:
        conn.close()
        os.unlink(db_path)
        print(f"\nüóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ë–î —É–¥–∞–ª–µ–Ω–∞: {db_path}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        test_vulnerability_insertion()
        test_data_extraction()
        test_error_handling()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
