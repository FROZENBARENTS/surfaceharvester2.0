#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sqlite3
import os
import sys
from datetime import datetime

def check_database_contents(db_file="scan_results.db"):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    if not os.path.exists(db_file):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•: {db_file}")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"   ‚Ä¢ {table[0]}")
        
        print("\n" + "=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        for table_name in [table[0] for table in tables]:
            print(f"\nüìä –¢–ê–ë–õ–ò–¶–ê: {table_name}")
            print("-" * 40)
            
            try:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {count}")
                
                if count > 0:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                    cursor.execute(f"PRAGMA table_info({table_name})")
                    columns = cursor.fetchall()
                    print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:")
                    for col in columns:
                        print(f"   ‚Ä¢ {col[1]} ({col[2]})")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
                    cursor.execute(f"SELECT * FROM {table_name} LIMIT 5")
                    rows = cursor.fetchall()
                    
                    if rows:
                        print(f"\nüìù –ü–µ—Ä–≤—ã–µ {len(rows)} –∑–∞–ø–∏—Å–µ–π:")
                        for i, row in enumerate(rows, 1):
                            print(f"   {i}. {row}")
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã vulnerability
                    if table_name == 'vulnerability':
                        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô:")
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
                        cursor.execute("""
                            SELECT severity, COUNT(*) as count 
                            FROM vulnerability 
                            GROUP BY severity 
                            ORDER BY CASE severity 
                                WHEN 'Critical' THEN 1 
                                WHEN 'High' THEN 2 
                                WHEN 'Medium' THEN 3 
                                WHEN 'Low' THEN 4 
                                ELSE 5 
                            END
                        """)
                        severity_stats = cursor.fetchall()
                        print(f"   üìä –ü–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:")
                        for severity, count in severity_stats:
                            print(f"      ‚Ä¢ {severity}: {count}")
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
                        cursor.execute("""
                            SELECT vulnerability_type, COUNT(*) as count 
                            FROM vulnerability 
                            GROUP BY vulnerability_type 
                            ORDER BY count DESC
                        """)
                        type_stats = cursor.fetchall()
                        print(f"   üìä –ü–æ —Ç–∏–ø–∞–º:")
                        for vuln_type, count in type_stats:
                            print(f"      ‚Ä¢ {vuln_type}: {count}")
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–∞–Ω–µ—Ä–∞–º
                        cursor.execute("""
                            SELECT scanner, COUNT(*) as count 
                            FROM vulnerability 
                            GROUP BY scanner 
                            ORDER BY count DESC
                        """)
                        scanner_stats = cursor.fetchall()
                        print(f"   üìä –ü–æ —Å–∫–∞–Ω–µ—Ä–∞–º:")
                        for scanner, count in scanner_stats:
                            print(f"      ‚Ä¢ {scanner}: {count}")
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã scansession
                    elif table_name == 'scansession':
                        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ï–°–°–ò–ô:")
                        cursor.execute("""
                            SELECT target, start_time, end_time, status 
                            FROM scansession 
                            ORDER BY start_time DESC
                        """)
                        sessions = cursor.fetchall()
                        for i, session in enumerate(sessions, 1):
                            target, start_time, end_time, status = session
                            print(f"   {i}. {target}")
                            print(f"      –°—Ç–∞—Ç—É—Å: {status}")
                            print(f"      –ù–∞—á–∞–ª–æ: {start_time}")
                            if end_time:
                                print(f"      –ö–æ–Ω–µ—Ü: {end_time}")
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã host
                    elif table_name == 'host':
                        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –•–û–°–¢–û–í:")
                        cursor.execute("""
                            SELECT hostname, ip_address, type, source 
                            FROM host 
                            ORDER BY hostname
                        """)
                        hosts = cursor.fetchall()
                        for i, host in enumerate(hosts, 1):
                            hostname, ip_address, host_type, source = host
                            print(f"   {i}. {hostname}")
                            if ip_address:
                                print(f"      IP: {ip_address}")
                            print(f"      –¢–∏–ø: {host_type}")
                            if source:
                                print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã subdomain
                    elif table_name == 'subdomain':
                        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–£–ë–î–û–ú–ï–ù–û–í:")
                        cursor.execute("""
                            SELECT name, parent_domain, source 
                            FROM subdomain 
                            ORDER BY name
                        """)
                        subdomains = cursor.fetchall()
                        for i, subdomain in enumerate(subdomains, 1):
                            name, parent_domain, source = subdomain
                            print(f"   {i}. {name}")
                            if parent_domain:
                                print(f"      –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–æ–º–µ–Ω: {parent_domain}")
                            if source:
                                print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")

def check_specific_target(db_file="scan_results.db", target=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏"""
    
    if not target:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return
    
    print(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –¶–ï–õ–ò: {target}")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()
        
        # –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ü–µ–ª–∏
        cursor.execute("""
            SELECT vulnerability_type, severity, description, scanner, timestamp
            FROM vulnerability 
            WHERE resource LIKE ? 
            ORDER BY severity DESC, timestamp DESC
        """, (f'%{target}%',))
        
        vulns = cursor.fetchall()
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(vulns)}")
        
        if vulns:
            for i, vuln in enumerate(vulns, 1):
                vuln_type, severity, description, scanner, timestamp = vuln
                print(f"\n   {i}. {vuln_type} ({severity})")
                print(f"      –°–∫–∞–Ω–µ—Ä: {scanner}")
                print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}...")
                print(f"      –í—Ä–µ–º—è: {timestamp}")
        
        # –°–µ—Å—Å–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–∏
        cursor.execute("""
            SELECT start_time, end_time, status
            FROM scansession 
            WHERE target LIKE ?
            ORDER BY start_time DESC
        """, (f'%{target}%',))
        
        sessions = cursor.fetchall()
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(sessions)}")
        
        if sessions:
            for i, session in enumerate(sessions, 1):
                start_time, end_time, status = session
                print(f"   {i}. –°—Ç–∞—Ç—É—Å: {status}")
                print(f"      –ù–∞—á–∞–ª–æ: {start_time}")
                if end_time:
                    print(f"      –ö–æ–Ω–µ—Ü: {end_time}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    check_database_contents("scan_results.db")
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        target = sys.argv[1]
        check_specific_target("scan_results.db", target)
    
    print("\nüí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   python check_scan_results.py example.com")

if __name__ == "__main__":
    main()
