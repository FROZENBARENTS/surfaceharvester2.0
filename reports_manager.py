#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç—ã —Å vulnx
"""

import sqlite3
import os
import sys
from datetime import datetime
from typing import Dict, List, Optional, Tuple

class ReportsManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self, db_file: str = "scan_results.db"):
        self.db_file = db_file
        self.emoji_map = {
            'Critical': 'üî¥',
            'High': 'üî¥', 
            'Medium': 'üü°',
            'Low': 'üü¢',
            'Info': '‚ÑπÔ∏è',
            'Unknown': '‚ùì'
        }
    
    def _get_connection(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists(self.db_file):
            raise FileNotFoundError(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {self.db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return sqlite3.connect(self.db_file)
    
    def _format_severity(self, severity: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å —ç–º–æ–¥–∑–∏"""
        emoji = self.emoji_map.get(severity, '‚ùì')
        return f"{emoji} {severity}"
    
    def _print_separator(self, title: str = ""):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        if title:
            print(f"\n{'='*60}")
            print(f"üìä {title}")
            print(f"{'='*60}")
        else:
            print(f"\n{'-'*60}")
    
    def _print_vulnx_commands(self, target: Optional[str] = None):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å vulnx"""
        self._print_separator("üöÄ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° VULNX")
        
        base_cmd = "poetry run python cli.py"
        target_param = f" --target {target}" if target else ""
        
        commands = [
            f"üîç {base_cmd} exploits search{target_param} --limit 10",
            f"üìä {base_cmd} exploits status",
            f"üìã {base_cmd} exploits report{target_param}",
            f"üîÑ {base_cmd} exploits monitor --interval 60",
            f"üìà {base_cmd} exploits report{target_param} --format json"
        ]
        
        descriptions = [
            "–ü–æ–∏—Å–∫ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö CVE",
            "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ CVE –∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤", 
            "–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —ç–∫—Å–ø–ª–æ–π—Ç–∞–º",
            "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö CVE",
            "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ JSON"
        ]
        
        for cmd, desc in zip(commands, descriptions):
            print(f"   {desc}")
            print(f"   {cmd}")
            print()
    
    def quick_summary_report(self, target: Optional[str] = None):
        """
        –û—Ç—á–µ—Ç 1: –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å
        """
        self._print_separator("üìà –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê")
        
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("SELECT COUNT(*) FROM vulnerability")
            total_vulns = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM scansession")
            total_sessions = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM host")
            total_hosts = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM subdomain")
            total_subdomains = cursor.fetchone()[0]
            
            print(f"üéØ –í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {total_vulns}")
            print(f"üìä –°–µ—Å—Å–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {total_sessions}")
            print(f"üåê –•–æ—Å—Ç–æ–≤: {total_hosts}")
            print(f"üîó –°—É–±–¥–æ–º–µ–Ω–æ–≤: {total_subdomains}")
            
            if total_vulns > 0:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
                cursor.execute("""
                    SELECT severity, COUNT(*) 
                    FROM vulnerability 
                    GROUP BY severity 
                    ORDER BY CASE severity 
                        WHEN 'Critical' THEN 1 
                        WHEN 'High' THEN 2 
                        WHEN 'Medium' THEN 3 
                        WHEN 'Low' THEN 4 
                        ELSE 5 
                    END
                """)
                
                severity_stats = cursor.fetchall()
                print(f"\nüîç –ü–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:")
                for severity, count in severity_stats:
                    formatted_severity = self._format_severity(severity)
                    print(f"   {formatted_severity}: {count}")
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                cursor.execute("""
                    SELECT vulnerability_type, severity, scanner, resource 
                    FROM vulnerability 
                    ORDER BY timestamp DESC 
                    LIMIT 5
                """)
                
                recent_vulns = cursor.fetchall()
                if recent_vulns:
                    print(f"\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Ö–æ–¥–∫–∏:")
                    for vuln_type, severity, scanner, resource in recent_vulns:
                        formatted_severity = self._format_severity(severity)
                        print(f"   {formatted_severity} {vuln_type} ({scanner}) - {resource[:50]}...")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def detailed_vulnerabilities_report(self, target: Optional[str] = None):
        """
        –û—Ç—á–µ—Ç 2: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        """
        self._print_separator("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô")
        
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            base_query = "SELECT vulnerability_type, severity, scanner, resource, description, timestamp FROM vulnerability"
            params = []
            
            if target:
                base_query += " WHERE resource LIKE ?"
                params.append(f"%{target}%")
            
            base_query += " ORDER BY severity DESC, timestamp DESC"
            
            cursor.execute(base_query, params)
            vulnerabilities = cursor.fetchall()
            
            if not vulnerabilities:
                print("‚ÑπÔ∏è –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(vulnerabilities)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            cursor.execute("""
                SELECT vulnerability_type, COUNT(*) as count 
                FROM vulnerability 
                GROUP BY vulnerability_type 
                ORDER BY count DESC
            """)
            
            type_stats = cursor.fetchall()
            print(f"\nüìã –ü–æ —Ç–∏–ø–∞–º:")
            for vuln_type, count in type_stats:
                print(f"   ‚Ä¢ {vuln_type}: {count}")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∫–∞–Ω–µ—Ä–∞–º
            cursor.execute("""
                SELECT scanner, COUNT(*) as count 
                FROM vulnerability 
                GROUP BY scanner 
                ORDER BY count DESC
            """)
            
            scanner_stats = cursor.fetchall()
            print(f"\nüõ†Ô∏è –ü–æ —Å–∫–∞–Ω–µ—Ä–∞–º:")
            for scanner, count in scanner_stats:
                print(f"   ‚Ä¢ {scanner}: {count}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–ø–µ—Ä–≤—ã–µ 10)
            print(f"\nüìù –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–ø–µ—Ä–≤—ã–µ 10):")
            for i, (vuln_type, severity, scanner, resource, description, timestamp) in enumerate(vulnerabilities[:10], 1):
                formatted_severity = self._format_severity(severity)
                print(f"\n   {i}. {formatted_severity} {vuln_type}")
                print(f"      –°–∫–∞–Ω–µ—Ä: {scanner}")
                print(f"      –†–µ—Å—É—Ä—Å: {resource}")
                if description:
                    desc_preview = description[:100] + "..." if len(description) > 100 else description
                    print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {desc_preview}")
                print(f"      –í—Ä–µ–º—è: {timestamp}")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def scan_sessions_report(self, target: Optional[str] = None):
        """
        –û—Ç—á–µ—Ç 3: –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        """
        self._print_separator("üìä –ò–°–¢–û–†–ò–Ø –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ô")
        
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏
            base_query = "SELECT target, start_time, end_time, status FROM scansession"
            params = []
            
            if target:
                base_query += " WHERE target LIKE ?"
                params.append(f"%{target}%")
            
            base_query += " ORDER BY start_time DESC"
            
            cursor.execute(base_query, params)
            sessions = cursor.fetchall()
            
            if not sessions:
                print("‚ÑπÔ∏è –°–µ—Å—Å–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
            
            for i, (session_target, start_time, end_time, status) in enumerate(sessions, 1):
                print(f"\n   {i}. üéØ {session_target}")
                print(f"      üìÖ –ù–∞—á–∞–ª–æ: {start_time}")
                if end_time:
                    print(f"      üìÖ –ö–æ–Ω–µ—Ü: {end_time}")
                print(f"      üìä –°—Ç–∞—Ç—É—Å: {status}")
                
                # –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                cursor.execute("""
                    SELECT COUNT(*) FROM vulnerability 
                    WHERE resource LIKE ?
                """, (f"%{session_target.replace('https://', '').replace('http://', '')}%",))
                
                vuln_count = cursor.fetchone()[0]
                print(f"      üîç –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {vuln_count}")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def hosts_and_subdomains_report(self, target: Optional[str] = None):
        """
        –û—Ç—á–µ—Ç 4: –•–æ—Å—Ç—ã –∏ —Å—É–±–¥–æ–º–µ–Ω—ã
        """
        self._print_separator("üåê –•–û–°–¢–´ –ò –°–£–ë–î–û–ú–ï–ù–´")
        
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # –•–æ—Å—Ç—ã
            print("üè† –•–û–°–¢–´:")
            cursor.execute("SELECT hostname, ip_address, type, source FROM host ORDER BY hostname")
            hosts = cursor.fetchall()
            
            if hosts:
                for hostname, ip_address, host_type, source in hosts:
                    print(f"   ‚Ä¢ {hostname}")
                    if ip_address:
                        print(f"     IP: {ip_address}")
                    print(f"     –¢–∏–ø: {host_type}")
                    if source:
                        print(f"     –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
                    print()
            else:
                print("   ‚ÑπÔ∏è –•–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –°—É–±–¥–æ–º–µ–Ω—ã
            print("üîó –°–£–ë–î–û–ú–ï–ù–´:")
            cursor.execute("SELECT name, parent_domain, source FROM subdomain ORDER BY name")
            subdomains = cursor.fetchall()
            
            if subdomains:
                for name, parent_domain, source in subdomains:
                    print(f"   ‚Ä¢ {name}")
                    if parent_domain:
                        print(f"     –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–æ–º–µ–Ω: {parent_domain}")
                    if source:
                        print(f"     –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
                    print()
            else:
                print("   ‚ÑπÔ∏è –°—É–±–¥–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def security_score_report(self, target: Optional[str] = None):
        """
        –û—Ç—á–µ—Ç 5: –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        self._print_separator("üõ°Ô∏è –û–¶–ï–ù–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–¥—Å—á–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            cursor.execute("""
                SELECT severity, COUNT(*) as count 
                FROM vulnerability 
                GROUP BY severity
            """)
            
            severity_counts = dict(cursor.fetchall())
            
            # –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (0-100, –≥–¥–µ 100 - –æ—Ç–ª–∏—á–Ω–æ)
            score = 100
            deductions = {
                'Critical': 25,
                'High': 15,
                'Medium': 8,
                'Low': 3,
                'Info': 1
            }
            
            total_deduction = 0
            for severity, count in severity_counts.items():
                deduction = deductions.get(severity, 0) * count
                total_deduction += deduction
            
            score = max(0, score - total_deduction)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if score >= 90:
                level = "üü¢ –û–¢–õ–ò–ß–ù–û"
                emoji = "üü¢"
            elif score >= 70:
                level = "üü° –•–û–†–û–®–û"
                emoji = "üü°"
            elif score >= 50:
                level = "üü† –°–†–ï–î–ù–ï"
                emoji = "üü†"
            else:
                level = "üî¥ –ö–†–ò–¢–ò–ß–ù–û"
                emoji = "üî¥"
            
            print(f"üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {emoji} {score}/100")
            print(f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {level}")
            
            print(f"\nüìà –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:")
            for severity in ['Critical', 'High', 'Medium', 'Low', 'Info']:
                count = severity_counts.get(severity, 0)
                if count > 0:
                    formatted_severity = self._format_severity(severity)
                    deduction = deductions.get(severity, 0) * count
                    print(f"   {formatted_severity}: {count} (-{deduction} –±–∞–ª–ª–æ–≤)")
            
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            if severity_counts.get('Critical', 0) > 0:
                print("   üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏!")
            if severity_counts.get('High', 0) > 0:
                print("   üî¥ –í–´–°–û–ö–û: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –≤—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
            if severity_counts.get('Medium', 0) > 5:
                print("   üü° –°–†–ï–î–ù–ï: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            if score >= 90:
                print("   üü¢ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def show_all_reports(self, target: Optional[str] = None):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ 5 –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
        """
        print("üìä –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Æ")
        print("=" * 60)
        
        reports = [
            ("–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞", self.quick_summary_report),
            ("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π", self.detailed_vulnerabilities_report),
            ("–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", self.scan_sessions_report),
            ("–•–æ—Å—Ç—ã –∏ —Å—É–±–¥–æ–º–µ–Ω—ã", self.hosts_and_subdomains_report),
            ("–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", self.security_score_report)
        ]
        
        for title, report_func in reports:
            try:
                report_func(target)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç—á–µ—Ç–µ '{title}': {e}")
        
        # –ö–æ–º–∞–Ω–¥—ã vulnx –≤ –∫–æ–Ω—Ü–µ
        self._print_vulnx_commands(target)
    
    def interactive_menu(self):
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞
        """
        while True:
            print("\n" + "="*60)
            print("üìä –ú–ï–ù–ï–î–ñ–ï–† –û–¢–ß–ï–¢–û–í")
            print("="*60)
            print("1. üìà –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞")
            print("2. üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            print("3. üìä –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            print("4. üåê –•–æ—Å—Ç—ã –∏ —Å—É–±–¥–æ–º–µ–Ω—ã")
            print("5. üõ°Ô∏è –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            print("6. üìã –í—Å–µ –æ—Ç—á–µ—Ç—ã")
            print("0. üö™ –í—ã—Ö–æ–¥")
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç (0-6): ").strip()
                
                if choice == '0':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif choice == '1':
                    self.quick_summary_report()
                elif choice == '2':
                    self.detailed_vulnerabilities_report()
                elif choice == '3':
                    self.scan_sessions_report()
                elif choice == '4':
                    self.hosts_and_subdomains_report()
                elif choice == '5':
                    self.security_score_report()
                elif choice == '6':
                    self.show_all_reports()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    continue
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã vulnx –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                self._print_vulnx_commands()
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument('--db', default='scan_results.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--target', help='–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–ª–∏')
    parser.add_argument('--report', type=int, choices=[1,2,3,4,5,6], 
                       help='–ù–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ (1-6, 6=–≤—Å–µ –æ—Ç—á–µ—Ç—ã)')
    parser.add_argument('--interactive', '-i', action='store_true', 
                       help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    
    args = parser.parse_args()
    
    try:
        manager = ReportsManager(args.db)
        
        if args.interactive:
            manager.interactive_menu()
        elif args.report:
            reports = {
                1: manager.quick_summary_report,
                2: manager.detailed_vulnerabilities_report,
                3: manager.scan_sessions_report,
                4: manager.hosts_and_subdomains_report,
                5: manager.security_score_report,
                6: manager.show_all_reports
            }
            reports[args.report](args.target)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã
            manager.show_all_reports(args.target)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
