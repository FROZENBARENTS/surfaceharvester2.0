#!/usr/bin/env python3
# test_nuclei_info_severity.py

import sqlite3
import tempfile
import os
from db.schema import setup_database
from db.vulnerability_manager import VulnerabilityManager

def test_nuclei_info_severity():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ severity 'info' –æ—Ç Nuclei
    """
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ severity 'info' –æ—Ç Nuclei...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_file:
        db_path = tmp_file.name
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        setup_database(cursor)
        conn.commit()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        vuln_manager = VulnerabilityManager()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Nuclei —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ severity —É—Ä–æ–≤–Ω—è–º–∏
        nuclei_test_data = [
            {
                'host': 'http://vulnweb.com',
                'info': {
                    'name': 'HTTP Security Headers Missing',
                    'severity': 'info',  # –ú–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –∫–∞–∫ –æ—Ç Nuclei
                    'description': 'Security headers are missing'
                }
            },
            {
                'host': 'http://vulnweb.com',
                'info': {
                    'name': 'SQL Injection Vulnerability',
                    'severity': 'high',  # –ú–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
                    'description': 'SQL injection found'
                }
            },
            {
                'host': 'http://vulnweb.com', 
                'info': {
                    'name': 'Cross-Site Scripting',
                    'severity': 'medium',  # –ú–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
                    'description': 'XSS vulnerability detected'
                }
            },
            {
                'host': 'http://vulnweb.com',
                'info': {
                    'name': 'Directory Listing',
                    'severity': 'low',  # –ú–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
                    'description': 'Directory listing enabled'
                }
            },
            {
                'host': 'http://vulnweb.com',
                'info': {
                    'name': 'Critical Remote Code Execution',
                    'severity': 'critical',  # –ú–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
                    'description': 'RCE vulnerability found'
                }
            }
        ]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        stats = vuln_manager.process_and_save_vulnerabilities(
            raw_data=nuclei_test_data,
            scanner_name='nuclei',
            cursor=cursor,
            target_resource='http://vulnweb.com'
        )
        
        conn.commit()
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.processed}")
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats.saved_new}")
        print(f"   –û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {stats.validation_errors}")
        print(f"   –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.processing_errors}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT vulnerability_type, severity FROM vulnerability WHERE scanner = 'nuclei'")
        saved_vulns = cursor.fetchall()
        
        print(f"\nüìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:")
        severity_counts = {}
        for vuln_type, severity in saved_vulns:
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
            print(f"   ‚Ä¢ {vuln_type} - Severity: {severity}")
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ severity:")
        for severity, count in severity_counts.items():
            print(f"   {severity}: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ severity –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        valid_severities = ['Critical', 'High', 'Medium', 'Low', 'Info', 'Unknown']
        invalid_severities = [s for s in severity_counts.keys() if s not in valid_severities]
        
        if invalid_severities:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ severity: {invalid_severities}")
            return False
        else:
            print("‚úÖ –í—Å–µ severity –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ info —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        if 'Info' not in severity_counts:
            print("‚ùå Info —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å!")
            return False
        else:
            print(f"‚úÖ Info —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {severity_counts['Info']}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        try:
            os.unlink(db_path)
        except:
            pass

if __name__ == "__main__":
    success = test_nuclei_info_severity()
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ severity —É—Ä–æ–≤–Ω–∏ –æ—Ç Nuclei")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
